import Foundation
/**
 * Represents the attested credential data structure in WebAuthn authenticator data.
 * - Description: This structure contains information about the credential that was created during registration, including the authenticator's AAGUID, the credential ID, and the credential's public key.
 */
public struct AttestedCredentialData: Equatable {
   /**
    * The Authenticator Attestation GUID (AAGUID).
    * - Description: A 16-byte identifier indicating the type of the authenticator. For privacy-preserving authenticators, this may be all zeros.
    */
   public let aaguid: [UInt8]
   /**
    * The credential identifier.
    * - Description: A variable-length byte array containing the credential ID, which is used to identify the credential for future authentications.
    */
   public let credentialID: [UInt8]
   /**
    * The credential public key.
    * - Description: A COSE_Key formatted public key that will be used for future authentications. This key is generated by the authenticator during credential creation.
    */
   public let publicKey: [UInt8]
}
/**
 * Getter
 */
extension AttestedCredentialData {
   /**
    * Returns the byte representation of the attested credential data.
    * - Description: This method concatenates the AAGUID, credential ID length (2 bytes), credential ID, and public key into a single byte array.
    * - Returns: A byte array containing the complete attested credential data structure.
    */
   func bytesRepresentation() -> [UInt8] {
      var result = [UInt8]()
      result += aaguid
      let credentialIDLength = UInt16(credentialID.count).bigEndian
      let credentialIDLengthBytes = withUnsafeBytes(of: credentialIDLength) { Array($0) }
      result += credentialIDLengthBytes
      result += credentialID
      result += publicKey
      return result
   }
}
/**
 * Int+Ext
 */
extension Int {
   /**
    * Converts an integer to a byte array representation.
    * - Description: This method converts the integer to its big-endian byte representation.
    * - Returns: An array of UInt8 bytes representing the integer in big-endian order.
    */
   fileprivate func uint8Array() -> [UInt8] {
      return withUnsafeBytes(of: self.bigEndian) {
         Array($0)
      }
   }
}
